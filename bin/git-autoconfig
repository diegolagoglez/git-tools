#!/bin/bash

SCOPE=

function git_get_var() {
	git config $SCOPE $1
}

function write_config() {
	for v in ${var_names[@]}; do
		echo "git config $SCOPE $v '${vars[$v]}'"
		if [ $? != 0 ]; then
			echo "ERROR: Cannot set Git configuration." 1>&2
			exit 1
		fi
	done
}

function print_config() {
	for v in ${var_names[@]}; do
		echo "$v = ${vars[$v]}"
	done
}

ask_for_vars=(user.name user.email core.editor)
var_names=(user.name user.email color.ui core.editor core.pager\
	branch.autosetuprebase push.default merge.commit merge.ff merge.log\
	log.date alias.unstage alias.discard)

declare -A vars

vars[user.name]=$(git_get_var user.name)
vars[user.email]=$(git_get_var user.email)
vars[core.editor]=$(git_get_var core.editor)
vars[color.ui]="true"
vars[core.pager]="less -FXn4"
vars[branch.autosetuprebase]="always"
vars[push.default]="simple"
vars[merge.commit]="no"
vars[merge.ff]="no"
vars[merge.log]="true"
vars[log.date]="iso"
vars[alias.unstage]="reset HEAD"
vars[alias.discard]="checkout --"

function ask_for_var() {
	local var_name="$1"
	read -p "$var_name? (${vars[$var_name]}): "
	if [ ! -z "$REPLY" ]; then
		vars[$var_name]?"$REPLY"
	fi
}

function ask_for_vars() {
	for v in ${ask_for_vars[@]}; do
		ask_for_var "$v"
	done
}

function confirm() {
	read -p "$* [yes/no]: "
	[ "$REPLY" == "yes" ]
}

function main() {
	ask_for_vars
	print_config

	echo
	if confirm "Are you sure you want to write Git configuration?"; then
		write_config
	else
		exit $?
	fi
}

main "$@"
